"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.startServer = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const node_1 = require("vscode-languageserver/node");
const vscode_languageserver_textdocument_1 = require("vscode-languageserver-textdocument");
const MessageHandler = __importStar(require("./MessageHandler"));
const util = __importStar(require("./prisma-fmt/util"));
const install_1 = __importDefault(require("./prisma-fmt/install"));
const fs_1 = require("fs");
const packageJson = require('../../package.json'); // eslint-disable-line
function getConnection(options) {
    let connection = options === null || options === void 0 ? void 0 : options.connection;
    if (!connection) {
        connection = process.argv.includes('--stdio')
            ? node_1.createConnection(process.stdin, process.stdout)
            : node_1.createConnection(new node_1.IPCMessageReader(process), new node_1.IPCMessageWriter(process));
    }
    return connection;
}
let hasCodeActionLiteralsCapability = false;
let hasConfigurationCapability = false;
/**
 * Starts the language server.
 *
 * @param options Options to customize behavior
 */
function startServer(options) {
    const connection = getConnection(options);
    console.log = connection.console.log.bind(connection.console);
    console.error = connection.console.error.bind(connection.console);
    const documents = new vscode_languageserver_1.TextDocuments(vscode_languageserver_textdocument_1.TextDocument);
    let defaultBinPath = '';
    connection.onInitialize((params) => __awaiter(this, void 0, void 0, function* () {
        var _a, _b, _c;
        const capabilities = params.capabilities;
        hasCodeActionLiteralsCapability = Boolean((_b = (_a = capabilities === null || capabilities === void 0 ? void 0 : capabilities.textDocument) === null || _a === void 0 ? void 0 : _a.codeAction) === null || _b === void 0 ? void 0 : _b.codeActionLiteralSupport);
        hasConfigurationCapability = Boolean((_c = capabilities === null || capabilities === void 0 ? void 0 : capabilities.workspace) === null || _c === void 0 ? void 0 : _c.configuration);
        defaultBinPath = yield util.getBinPath();
        connection.console.info(`Default version of Prisma binary 'prisma-fmt': ${util.getVersion()}`);
        connection.console.info(
        // eslint-disable-next-line
        `Extension name ${packageJson.name} with version ${packageJson.version}`);
        const prismaCLIVersion = util.getCLIVersion();
        connection.console.info(`Prisma CLI version: ${prismaCLIVersion}`);
        const result = {
            capabilities: {
                definitionProvider: true,
                documentFormattingProvider: true,
                completionProvider: {
                    resolveProvider: true,
                    triggerCharacters: ['@', '"', '.'],
                },
                hoverProvider: true,
                renameProvider: true,
            },
        };
        if (hasCodeActionLiteralsCapability) {
            result.capabilities.codeActionProvider = {
                codeActionKinds: [vscode_languageserver_1.CodeActionKind.QuickFix],
            };
        }
        return result;
    }));
    connection.onInitialized(() => {
        if (hasConfigurationCapability) {
            // Register for all configuration changes.
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            connection.client.register(vscode_languageserver_1.DidChangeConfigurationNotification.type, undefined);
        }
    });
    // The global settings, used when the `workspace/configuration` request is not supported by the client or is not set by the user.
    // This does not apply to VSCode, as this client supports this setting.
    const defaultSettings = {
        prismaFmtBinPath: defaultBinPath,
    };
    let globalSettings = defaultSettings;
    // Cache the settings of all open documents
    const documentSettings = new Map();
    connection.onDidChangeConfiguration((change) => {
        connection.console.info('Configuration changed.');
        if (hasConfigurationCapability) {
            // Reset all cached document settings
            documentSettings.clear();
        }
        else {
            globalSettings = (change.settings.prisma || defaultSettings); // eslint-disable-line @typescript-eslint/no-unsafe-member-access
        }
        documents.all().forEach((d) => __awaiter(this, void 0, void 0, function* () { return yield installPrismaFmt(d.uri); })); // eslint-disable-line @typescript-eslint/no-misused-promises
        // Revalidate all open prisma schemas
        documents.all().forEach(validateTextDocument); // eslint-disable-line @typescript-eslint/no-misused-promises
    });
    // Only keep settings for open documents
    documents.onDidClose((e) => {
        documentSettings.delete(e.document.uri);
    });
    function getDocumentSettings(resource) {
        if (!hasConfigurationCapability) {
            connection.console.info(`Using default prisma-fmt binary path.`);
            return Promise.resolve(globalSettings);
        }
        let result = documentSettings.get(resource);
        if (!result) {
            result = connection.workspace.getConfiguration({
                scopeUri: resource,
                section: 'prisma',
            });
            documentSettings.set(resource, result);
        }
        return result;
    }
    function getPrismaFmtBinPath(binPathSetting) {
        if (!binPathSetting || binPathSetting.length === 0) {
            return defaultBinPath;
        }
        else if (!fs_1.existsSync(binPathSetting)) {
            connection.window.showErrorMessage(`Path to prisma-fmt binary (${binPathSetting}) does not exist. Using default prisma-fmt binary path instead.`);
            return defaultBinPath;
        }
        else {
            connection.console.log('Using binary path from Prisma Language Server configuration.');
            return binPathSetting;
        }
    }
    function validateTextDocument(textDocument) {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = yield getDocumentSettings(textDocument.uri);
            const fmtBinPath = getPrismaFmtBinPath(settings.prismaFmtBinPath);
            const diagnostics = yield MessageHandler.handleDiagnosticsRequest(textDocument, fmtBinPath, (errorMessage) => {
                connection.window.showErrorMessage(errorMessage);
            });
            connection.sendDiagnostics({ uri: textDocument.uri, diagnostics });
        });
    }
    documents.onDidChangeContent((change) => __awaiter(this, void 0, void 0, function* () {
        yield installPrismaFmt(change.document.uri);
        yield validateTextDocument(change.document);
    }));
    function installPrismaFmt(documentUri) {
        return __awaiter(this, void 0, void 0, function* () {
            const settings = yield getDocumentSettings(documentUri);
            const prismaFmtBinPath = getPrismaFmtBinPath(settings.prismaFmtBinPath);
            connection.console.info(`Local prisma-fmt path: ${prismaFmtBinPath}`);
            const isInstallNecessary = util.binaryIsNeeded(prismaFmtBinPath);
            if (isInstallNecessary ||
                (!isInstallNecessary && !(yield util.testBinarySuccess(prismaFmtBinPath)))) {
                const downloadUrl = yield util.getDownloadURL();
                connection.console.info(`Downloading prisma-fmt from ${downloadUrl}`);
                try {
                    yield install_1.default(downloadUrl, prismaFmtBinPath);
                    const version = yield util.getBinaryVersion(prismaFmtBinPath);
                    connection.console.info(`Prisma plugin prisma-fmt installation succeeded.`);
                    connection.console.info(`Installed version ${version} of 'prisma-fmt' using path: ${prismaFmtBinPath}`);
                }
                catch (err) {
                    const message = err instanceof Error ? err.message : `${err}`; // eslint-disable-line @typescript-eslint/restrict-template-expressions
                    connection.console.error(`Cannot install prisma-fmt: ${message}. Please:\n` +
                        '1. Check your network connection and run `Prisma: Restart Language Server`, or\n' +
                        '2. Manually download and uncompress the archive file, then set the path in `prisma.prismaFmtBinPath`\n\n' +
                        `The achieve file can be acquired at:\n  ${downloadUrl}\n\n`);
                }
            }
        });
    }
    function getDocument(uri) {
        return documents.get(uri);
    }
    connection.onDefinition((params) => {
        const doc = getDocument(params.textDocument.uri);
        if (doc) {
            return MessageHandler.handleDefinitionRequest(doc, params);
        }
    });
    connection.onCompletion((params) => __awaiter(this, void 0, void 0, function* () {
        const doc = getDocument(params.textDocument.uri);
        const settings = yield getDocumentSettings(params.textDocument.uri);
        const prismaFmtBinPath = getPrismaFmtBinPath(settings.prismaFmtBinPath);
        if (doc) {
            return MessageHandler.handleCompletionRequest(params, doc, prismaFmtBinPath);
        }
    }));
    connection.onCompletionResolve((completionItem) => {
        return MessageHandler.handleCompletionResolveRequest(completionItem);
    });
    connection.onDidChangeWatchedFiles(() => {
        // Monitored files have changed in VS Code
        connection.console.log(`Types have changed. Sending request to restart TS Language Server.`);
        // Restart TS Language Server
        connection.sendNotification('prisma/didChangeWatchedFiles', {});
    });
    connection.onHover((params) => {
        const doc = getDocument(params.textDocument.uri);
        if (doc) {
            return MessageHandler.handleHoverRequest(doc, params);
        }
    });
    connection.onDocumentFormatting((params) => __awaiter(this, void 0, void 0, function* () {
        const doc = getDocument(params.textDocument.uri);
        const settings = yield getDocumentSettings(params.textDocument.uri);
        const prismaFmtBinPath = getPrismaFmtBinPath(settings.prismaFmtBinPath);
        if (doc) {
            return MessageHandler.handleDocumentFormatting(params, doc, prismaFmtBinPath, (errorMessage) => {
                connection.window.showErrorMessage(errorMessage);
            });
        }
    }));
    connection.onCodeAction((params) => {
        const doc = getDocument(params.textDocument.uri);
        if (doc) {
            return MessageHandler.handleCodeActions(params, doc);
        }
    });
    connection.onRenameRequest((params) => {
        const doc = getDocument(params.textDocument.uri);
        if (doc) {
            return MessageHandler.handleRenameRequest(params, doc);
        }
    });
    // Make the text document manager listen on the connection
    // for open, change and close text document events
    documents.listen(connection);
    connection.listen();
}
exports.startServer = startServer;
//# sourceMappingURL=server.js.map