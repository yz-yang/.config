"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const codeActionProvider_1 = require("../codeActionProvider");
const vscode_languageserver_1 = require("vscode-languageserver");
const assert = __importStar(require("assert"));
const helper_1 = require("./helper");
function assertQuickFix(expected, fixturePath, range, diagnostics) {
    const document = helper_1.getTextDocument(fixturePath);
    const params = {
        textDocument: document,
        context: {
            diagnostics: diagnostics,
        },
        range: range,
    };
    const quickFixResult = codeActionProvider_1.quickFix(document, params);
    assert.ok(quickFixResult.length !== 0);
    assert.deepStrictEqual(quickFixResult, expected);
}
function createDiagnosticErrorUnknownType(unknownType, range) {
    return {
        message: 'Type "' +
            unknownType +
            '" is neither a built-in type, nor refers to another model, custom type, or enum.',
        severity: vscode_languageserver_1.DiagnosticSeverity.Error,
        range: range,
    };
}
suite('Quick Fix', () => {
    const fixturePath = './codeActions/quickFixes.prisma';
    const rangeNewModel = {
        start: { line: 16, character: 9 },
        end: { line: 16, character: 17 },
    };
    const rangeNewEnum = {
        start: { line: 24, character: 6 },
        end: { line: 24, character: 13 },
    };
    const rangePorst = {
        start: { line: 31, character: 15 },
        end: { line: 31, character: 9 },
    };
    const rangeEdit = {
        start: { line: 35, character: 0 },
        end: { line: 35, character: 0 },
    };
    const diagnosticsNewModel = [
        createDiagnosticErrorUnknownType('NewModel', rangeNewModel),
    ];
    const diagnosticsNewEnum = [
        createDiagnosticErrorUnknownType('NewEnum', rangeNewEnum),
    ];
    const diagnosticsPorst = [
        createDiagnosticErrorUnknownType('Porst', rangePorst),
    ];
    test('Model/enum creations', () => {
        assertQuickFix([
            {
                title: "Create new model 'NewModel'",
                kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                diagnostics: diagnosticsNewModel,
                edit: {
                    changes: {
                        [fixturePath]: [
                            {
                                range: rangeEdit,
                                newText: '\nmodel NewModel {\n\n}\n',
                            },
                        ],
                    },
                },
            },
            {
                title: "Create new enum 'NewModel'",
                kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                diagnostics: diagnosticsNewModel,
                edit: {
                    changes: {
                        [fixturePath]: [
                            {
                                range: rangeEdit,
                                newText: '\nenum NewModel {\n\n}\n',
                            },
                        ],
                    },
                },
            },
        ], fixturePath, rangeNewModel, diagnosticsNewModel),
            assertQuickFix([
                {
                    title: "Create new model 'NewEnum'",
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: diagnosticsNewEnum,
                    edit: {
                        changes: {
                            [fixturePath]: [
                                {
                                    range: rangeEdit,
                                    newText: '\nmodel NewEnum {\n\n}\n',
                                },
                            ],
                        },
                    },
                },
                {
                    title: "Create new enum 'NewEnum'",
                    kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                    diagnostics: diagnosticsNewEnum,
                    edit: {
                        changes: {
                            [fixturePath]: [
                                {
                                    range: rangeEdit,
                                    newText: '\nenum NewEnum {\n\n}\n',
                                },
                            ],
                        },
                    },
                },
            ], fixturePath, rangeNewEnum, diagnosticsNewEnum);
    });
    test('Spelling suggestions and model/enum creations', () => {
        assertQuickFix([
            {
                title: "Change spelling to 'Post'",
                kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                diagnostics: diagnosticsPorst,
                edit: {
                    changes: {
                        [fixturePath]: [
                            {
                                range: rangePorst,
                                newText: 'Post?',
                            },
                        ],
                    },
                },
            },
            {
                title: "Create new model 'Porst'",
                kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                diagnostics: diagnosticsPorst,
                edit: {
                    changes: {
                        [fixturePath]: [
                            {
                                range: rangeEdit,
                                newText: '\nmodel Porst {\n\n}\n',
                            },
                        ],
                    },
                },
            },
            {
                title: "Create new enum 'Porst'",
                kind: vscode_languageserver_1.CodeActionKind.QuickFix,
                diagnostics: diagnosticsPorst,
                edit: {
                    changes: {
                        [fixturePath]: [
                            {
                                range: rangeEdit,
                                newText: '\nenum Porst {\n\n}\n',
                            },
                        ],
                    },
                },
            },
        ], fixturePath, rangePorst, diagnosticsPorst);
    });
});
//# sourceMappingURL=quickFix.test.js.map