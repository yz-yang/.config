"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MessageHandler_1 = require("../MessageHandler");
const vscode_languageserver_1 = require("vscode-languageserver");
const assert = __importStar(require("assert"));
const helper_1 = require("./helper");
const util_1 = require("../prisma-fmt/util");
const install_1 = __importDefault(require("../prisma-fmt/install"));
function assertCompletion(fixturePath, position, expected) {
    const document = helper_1.getTextDocument(fixturePath);
    const params = {
        textDocument: document,
        position: position,
        context: {
            triggerKind: 1,
        },
    };
    const completionResult = MessageHandler_1.handleCompletionRequest(params, document, binPathPrismaFmt);
    assert.ok(completionResult !== undefined);
    assert.deepStrictEqual(completionResult.isIncomplete, expected.isIncomplete);
    assert.deepStrictEqual(completionResult.items.length, expected.items.length);
    assert.deepStrictEqual(completionResult.items.map((items) => items.label), expected.items.map((items) => items.label));
    assert.deepStrictEqual(completionResult.items.map((item) => item.kind), expected.items.map((item) => item.kind));
}
// Cache prisma-fmt binary path
let binPathPrismaFmt = '';
suite('Quick Fix', () => {
    suiteSetup(() => __awaiter(void 0, void 0, void 0, function* () {
        // install prisma-fmt binary
        if (binPathPrismaFmt === '') {
            binPathPrismaFmt = yield util_1.getBinPath();
        }
        if (util_1.binaryIsNeeded(binPathPrismaFmt)) {
            yield install_1.default(yield util_1.getDownloadURL(), binPathPrismaFmt);
        }
    }));
    const emptyDocUri = 'completions/empty.prisma';
    const sqliteDocUri = 'completions/datasourceWithSqlite.prisma';
    const dataSourceWithUri = 'completions/datasourceWithUrl.prisma';
    const emptyBlocksUri = 'completions/emptyBlocks.prisma';
    const modelBlocksUri = 'completions/modelBlocks.prisma';
    const enumCommentUri = 'completions/enumWithComments.prisma';
    // ALL BLOCKS
    test('Diagnoses block type suggestions with sqlite as provider', () => {
        assertCompletion(sqliteDocUri, { line: 4, character: 0 }, {
            isIncomplete: false,
            items: [
                { label: 'datasource', kind: vscode_languageserver_1.CompletionItemKind.Class },
                { label: 'generator', kind: vscode_languageserver_1.CompletionItemKind.Class },
                { label: 'model', kind: vscode_languageserver_1.CompletionItemKind.Class },
            ],
        });
    });
    test('Diagnoses block type suggestions for empty file', () => {
        assertCompletion(emptyDocUri, { line: 0, character: 0 }, {
            isIncomplete: false,
            items: [
                { label: 'datasource', kind: vscode_languageserver_1.CompletionItemKind.Class },
                { label: 'generator', kind: vscode_languageserver_1.CompletionItemKind.Class },
                { label: 'model', kind: vscode_languageserver_1.CompletionItemKind.Class },
                { label: 'enum', kind: vscode_languageserver_1.CompletionItemKind.Class },
            ],
        });
    });
    // DATASOURCE BLOCK
    const fieldPreviewFeatures = {
        label: 'previewFeatures',
        kind: vscode_languageserver_1.CompletionItemKind.Field,
    };
    const fieldProvider = {
        label: 'provider',
        kind: vscode_languageserver_1.CompletionItemKind.Field,
    };
    const fieldUrl = { label: 'url', kind: vscode_languageserver_1.CompletionItemKind.Field };
    const fieldShadowDatabaseUrl = {
        label: 'shadowDatabaseUrl',
        kind: vscode_languageserver_1.CompletionItemKind.Field,
    };
    const sqlite = { label: 'sqlite', kind: vscode_languageserver_1.CompletionItemKind.Constant };
    const mysql = { label: 'mysql', kind: vscode_languageserver_1.CompletionItemKind.Constant };
    const postgresql = {
        label: 'postgresql',
        kind: vscode_languageserver_1.CompletionItemKind.Constant,
    };
    const mssql = {
        label: 'sqlserver',
        kind: vscode_languageserver_1.CompletionItemKind.Constant,
    };
    const array = { label: '[]', kind: vscode_languageserver_1.CompletionItemKind.Property };
    const quotationMarks = {
        label: '""',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const envArgument = {
        label: 'DATABASE_URL',
        kind: vscode_languageserver_1.CompletionItemKind.Constant,
    };
    const env = { label: 'env()', kind: vscode_languageserver_1.CompletionItemKind.Property };
    test('Diagnoses datasource field suggestions in empty block', () => {
        assertCompletion(emptyBlocksUri, { line: 1, character: 0 }, {
            isIncomplete: false,
            items: [fieldProvider, fieldUrl, fieldShadowDatabaseUrl],
        });
    });
    test('Diagnoses datasource field suggestions with existing field', () => {
        assertCompletion(sqliteDocUri, { line: 2, character: 0 }, {
            isIncomplete: false,
            items: [fieldUrl, fieldShadowDatabaseUrl],
        });
        assertCompletion(dataSourceWithUri, { line: 2, character: 0 }, {
            isIncomplete: false,
            items: [fieldProvider, fieldShadowDatabaseUrl],
        });
    });
    test('Diagnoses url argument suggestions for datasource block', () => {
        assertCompletion(dataSourceWithUri, { line: 7, character: 10 }, {
            isIncomplete: true,
            items: [quotationMarks, env],
        }),
            assertCompletion(dataSourceWithUri, { line: 11, character: 15 }, {
                isIncomplete: false,
                items: [envArgument],
            });
    });
    test('Diagnoses single provider suggestions for datasource block', () => {
        assertCompletion(sqliteDocUri, { line: 14, character: 14 }, {
            isIncomplete: true,
            items: [mysql, postgresql, sqlite, mssql],
        }),
            assertCompletion(sqliteDocUri, { line: 18, character: 13 }, {
                isIncomplete: true,
                items: [array, quotationMarks],
            });
    });
    test('Diagnoses multiple provider suggestions for datasource block', () => {
        assertCompletion(sqliteDocUri, { line: 6, character: 15 }, {
            isIncomplete: true,
            items: [mysql, postgresql, sqlite, mssql],
        }),
            assertCompletion(sqliteDocUri, { line: 22, character: 14 }, {
                isIncomplete: true,
                items: [quotationMarks],
            });
        assertCompletion(sqliteDocUri, { line: 10, character: 25 }, {
            isIncomplete: true,
            items: [mysql, postgresql, mssql],
        });
    });
    // GENERATOR BLOCK
    const fieldOutput = { label: 'output', kind: vscode_languageserver_1.CompletionItemKind.Field };
    const fieldBinaryTargets = {
        label: 'binaryTargets',
        kind: vscode_languageserver_1.CompletionItemKind.Field,
    };
    const generatorWithExistingFieldsUri = 'completions/generatorWithExistingFields.prisma';
    test('Diagnoses generator field suggestions in empty block', () => {
        assertCompletion(emptyBlocksUri, { line: 5, character: 0 }, {
            isIncomplete: false,
            items: [
                fieldProvider,
                fieldOutput,
                fieldBinaryTargets,
                fieldPreviewFeatures,
            ],
        });
    });
    test('Diagnoses generator field suggestions with existing fields', () => {
        assertCompletion(generatorWithExistingFieldsUri, { line: 2, character: 0 }, {
            isIncomplete: false,
            items: [fieldOutput, fieldBinaryTargets, fieldPreviewFeatures],
        });
        assertCompletion(generatorWithExistingFieldsUri, { line: 7, character: 0 }, {
            isIncomplete: false,
            items: [fieldProvider, fieldBinaryTargets, fieldPreviewFeatures],
        });
    });
    // BLOCK ATTRIBUTES
    const blockAttributeId = {
        label: '@@id([])',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const blockAttributeMap = {
        label: '@@map("")',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const blockAttributeUnique = {
        label: '@@unique([])',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const blockAttributeIndex = {
        label: '@@index([])',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const blockAttributeIgnore = {
        label: '@@ignore',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    test('Diagnoses block attribute suggestions first in a line', () => {
        assertCompletion(emptyBlocksUri, { line: 9, character: 0 }, {
            isIncomplete: false,
            items: [
                blockAttributeMap,
                blockAttributeId,
                blockAttributeUnique,
                blockAttributeIndex,
                blockAttributeIgnore,
            ],
        });
    });
    test('Diagnoses block attribute suggestions with existing attributes first in a line', () => {
        assertCompletion(modelBlocksUri, { line: 5, character: 0 }, {
            isIncomplete: false,
            items: [
                blockAttributeMap,
                blockAttributeId,
                blockAttributeUnique,
                blockAttributeIndex,
                blockAttributeIgnore,
            ],
        });
        assertCompletion(modelBlocksUri, { line: 14, character: 0 }, {
            isIncomplete: false,
            items: [
                blockAttributeMap,
                blockAttributeUnique,
                blockAttributeIndex,
                blockAttributeIgnore,
            ],
        });
    });
    // TYPES
    test('Diagnoses type suggestions in model block', () => {
        assertCompletion(modelBlocksUri, { line: 51, character: 7 }, {
            isIncomplete: true,
            items: [
                { label: 'String', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'Boolean', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'Int', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'Float', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'DateTime', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'Json', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'Bytes', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'Decimal', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'BigInt', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'Unsupported("")', kind: vscode_languageserver_1.CompletionItemKind.TypeParameter },
                { label: 'User', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'Post', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'Person', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'Test', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'Cat', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'SecondUser', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'ThirdUser', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'TypeCheck', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'Hello', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'DateTest', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'UserType', kind: vscode_languageserver_1.CompletionItemKind.Reference },
                { label: 'ForthUser', kind: vscode_languageserver_1.CompletionItemKind.Reference },
            ],
        });
    });
    // FIELD ATTRIBUTES
    const fieldAttributeId = {
        label: '@id',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const fieldAttributeUnique = {
        label: '@unique',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const fieldAttributeMap = {
        label: '@map("")',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const fieldAttributeDefault = {
        label: '@default()',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const fieldAttributeRelation = {
        label: '@relation()',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const fieldAttributeUpdatedAt = {
        label: '@updatedAt',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const fieldAttributeIgnore = {
        label: '@ignore',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const functionCuid = {
        label: 'cuid()',
        kind: vscode_languageserver_1.CompletionItemKind.Function,
    };
    const functionUuid = {
        label: 'uuid()',
        kind: vscode_languageserver_1.CompletionItemKind.Function,
    };
    const functionAutoInc = {
        label: 'autoincrement()',
        kind: vscode_languageserver_1.CompletionItemKind.Function,
    };
    const functionNow = {
        label: 'now()',
        kind: vscode_languageserver_1.CompletionItemKind.Function,
    };
    const functionDbGenerated = {
        label: 'dbgenerated("")',
        kind: vscode_languageserver_1.CompletionItemKind.Function,
    };
    const staticValueTrue = {
        label: 'true',
        kind: vscode_languageserver_1.CompletionItemKind.Value,
    };
    const staticValueFalse = {
        label: 'false',
        kind: vscode_languageserver_1.CompletionItemKind.Value,
    };
    const enumValueOne = {
        label: 'ADMIN',
        kind: vscode_languageserver_1.CompletionItemKind.Value,
    };
    const enumValueTwo = {
        label: 'NORMAL',
        kind: vscode_languageserver_1.CompletionItemKind.Value,
    };
    const fieldsProperty = {
        label: 'fields: []',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const referencesProperty = {
        label: 'references: []',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    const nameProperty = {
        label: '""',
        kind: vscode_languageserver_1.CompletionItemKind.Property,
    };
    test('Diagnoses field and block attribute suggestions', () => {
        assertCompletion(modelBlocksUri, { line: 18, character: 14 }, {
            isIncomplete: false,
            items: [
                fieldAttributeId,
                fieldAttributeUnique,
                fieldAttributeMap,
                fieldAttributeDefault,
                fieldAttributeRelation,
                fieldAttributeIgnore,
            ],
        });
        assertCompletion(modelBlocksUri, { line: 19, character: 14 }, {
            isIncomplete: false,
            items: [
                fieldAttributeUnique,
                fieldAttributeMap,
                fieldAttributeDefault,
                fieldAttributeRelation,
                fieldAttributeIgnore,
            ],
        });
        assertCompletion(modelBlocksUri, { line: 61, character: 20 }, {
            isIncomplete: false,
            items: [
                fieldAttributeUnique,
                fieldAttributeMap,
                fieldAttributeDefault,
                fieldAttributeRelation,
                fieldAttributeUpdatedAt,
                fieldAttributeIgnore,
            ],
        });
        assertCompletion(modelBlocksUri, { line: 13, character: 16 }, {
            isIncomplete: false,
            items: [
                fieldAttributeUnique,
                fieldAttributeMap,
                fieldAttributeDefault,
                fieldAttributeRelation,
                fieldAttributeIgnore,
            ],
        });
        assertCompletion(modelBlocksUri, { line: 74, character: 24 }, {
            isIncomplete: false,
            items: [{ label: 'lastName', kind: vscode_languageserver_1.CompletionItemKind.Field }],
        });
    });
    test('Diagnoses functions as default values', () => {
        assertCompletion(modelBlocksUri, { line: 11, character: 24 }, {
            isIncomplete: false,
            items: [functionDbGenerated, functionAutoInc],
        });
        assertCompletion(modelBlocksUri, { line: 28, character: 27 }, {
            isIncomplete: false,
            items: [functionDbGenerated, functionUuid, functionCuid],
        });
        assertCompletion(modelBlocksUri, { line: 30, character: 36 }, {
            isIncomplete: false,
            items: [functionDbGenerated, functionNow],
        });
    });
    test('Diagnoses static default values', () => {
        assertCompletion(modelBlocksUri, { line: 24, character: 28 }, {
            isIncomplete: false,
            items: [functionDbGenerated, staticValueTrue, staticValueFalse],
        });
    });
    test('Diagnoses default suggestions for enum values', () => {
        assertCompletion(modelBlocksUri, { line: 62, character: 27 }, {
            isIncomplete: false,
            items: [functionDbGenerated, enumValueOne, enumValueTwo],
        });
    });
    test('Diagnoses default suggestions for enum values excluding comments', () => {
        assertCompletion(enumCommentUri, { line: 11, character: 30 }, {
            isIncomplete: false,
            items: [functionDbGenerated, enumValueOne, enumValueTwo],
        });
    });
    test('Diagnoses arguments of @@unique', () => {
        assertCompletion(modelBlocksUri, { line: 38, character: 15 }, {
            isIncomplete: false,
            items: [
                { label: 'firstName', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'lastName', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'isAdmin', kind: vscode_languageserver_1.CompletionItemKind.Field },
            ],
        });
    });
    test('Diagnoses arguments of @@id', () => {
        assertCompletion(modelBlocksUri, { line: 46, character: 10 }, {
            isIncomplete: false,
            items: [
                { label: 'firstName', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'lastName', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'isAdmin', kind: vscode_languageserver_1.CompletionItemKind.Field },
            ],
        });
    });
    test('Diagnoses arguments of @@index', () => {
        assertCompletion(modelBlocksUri, { line: 47, character: 13 }, {
            isIncomplete: false,
            items: [
                { label: 'firstName', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'lastName', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'isAdmin', kind: vscode_languageserver_1.CompletionItemKind.Field },
            ],
        });
    });
    const relationDirectiveUri = 'completions/relationDirective.prisma';
    test('Diagnoses arguments of @relation directive', () => {
        assertCompletion(relationDirectiveUri, { line: 12, character: 26 }, {
            isIncomplete: false,
            items: [referencesProperty, fieldsProperty, nameProperty],
        });
        assertCompletion(relationDirectiveUri, { line: 21, character: 39 }, {
            isIncomplete: false,
            items: [
                { label: 'id', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'items', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'total', kind: vscode_languageserver_1.CompletionItemKind.Field },
            ],
        });
        assertCompletion(relationDirectiveUri, { line: 30, character: 44 }, {
            isIncomplete: false,
            items: [fieldsProperty, nameProperty],
        });
        assertCompletion(relationDirectiveUri, { line: 39, character: 45 }, {
            isIncomplete: false,
            items: [referencesProperty, nameProperty],
        });
        assertCompletion(relationDirectiveUri, { line: 48, character: 35 }, {
            isIncomplete: false,
            items: [
                { label: 'id', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'productName', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'productPrice', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'quantity', kind: vscode_languageserver_1.CompletionItemKind.Field },
                { label: 'orderId', kind: vscode_languageserver_1.CompletionItemKind.Field },
            ],
        });
    });
});
//# sourceMappingURL=completion.test.js.map