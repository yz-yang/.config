"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.testBinarySuccess = exports.getBinaryVersion = exports.binaryIsNeeded = exports.getCLIVersion = exports.getDownloadURL = exports.getBinPath = exports.getVersion = void 0;
/**
 * Imports
 */
const get_platform_1 = require("@prisma/get-platform");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const exec_1 = __importDefault(require("./exec"));
const packageJson = require('../../../package.json'); // eslint-disable-line
/**
 * Lookup Cache
 */
let platform;
let version;
/**
 * Lookup version
 */
function getVersion() {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    if (!packageJson || !packageJson.prisma || !packageJson.prisma.version) {
        return 'latest';
    }
    // eslint-disable-next-line
    return packageJson.prisma.version;
}
exports.getVersion = getVersion;
/**
 * Get the exec path
 */
function getBinPath() {
    return __awaiter(this, void 0, void 0, function* () {
        platform = platform || (yield get_platform_1.getPlatform());
        version = version || getVersion();
        const extension = platform === 'windows' ? '.exe' : '';
        return path_1.default.join(__dirname, `prisma-fmt.${version}${extension}`);
    });
}
exports.getBinPath = getBinPath;
/**
 * Gets the download URL for a platform
 */
function getDownloadURL() {
    return __awaiter(this, void 0, void 0, function* () {
        platform = platform || (yield get_platform_1.getPlatform());
        version = version || getVersion();
        const extension = platform === 'windows' ? '.exe.gz' : '.gz';
        return `https://binaries.prisma.sh/all_commits/${version}/${platform}/prisma-fmt${extension}`;
    });
}
exports.getDownloadURL = getDownloadURL;
function getCLIVersion() {
    // eslint-disable-next-line
    return packageJson.dependencies['@prisma/get-platform'];
}
exports.getCLIVersion = getCLIVersion;
function binaryIsNeeded(path) {
    return !fs_1.default.existsSync(path);
}
exports.binaryIsNeeded = binaryIsNeeded;
function getBinaryVersion(path) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const output = yield exec_1.default(path, ['--version'], '');
            return output;
        }
        catch (errors) {
            console.log(errors);
            return '';
        }
    });
}
exports.getBinaryVersion = getBinaryVersion;
function testBinarySuccess(path) {
    return __awaiter(this, void 0, void 0, function* () {
        // try to execute version command
        const version = yield getBinaryVersion(path);
        if (version === '') {
            console.log('Binary test failed. Re-attempting a download.');
            return false;
        }
        console.log('Binary test successful.');
        return true;
    });
}
exports.testBinarySuccess = testBinarySuccess;
//# sourceMappingURL=util.js.map