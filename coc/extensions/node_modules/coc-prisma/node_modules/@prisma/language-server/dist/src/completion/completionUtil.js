"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.previewFeaturesArguments = exports.generatorProviderArguments = exports.generatorProviders = exports.dataSourceProviderArguments = exports.dataSourceProviders = exports.dataSourceUrlArguments = exports.relationArguments = exports.fieldAttributes = exports.blockAttributes = exports.supportedGeneratorFields = exports.supportedDataSourceFields = exports.allowedBlockTypes = exports.corePrimitiveTypes = void 0;
const vscode_languageserver_1 = require("vscode-languageserver");
const completions = __importStar(require("./completions.json"));
/**
 * Converts a json object containing labels and documentations to CompletionItems.
 */
function convertToCompletionItems(completionItems, itemKind, insertTextFunc) {
    const result = [];
    for (const item of completionItems) {
        result.push({
            label: item.label,
            kind: itemKind,
            insertText: insertTextFunc ? insertTextFunc(item.label) : undefined,
            insertTextFormat: insertTextFunc ? 2 : 1,
            documentation: item.documentation
                ? { kind: vscode_languageserver_1.MarkupKind.Markdown, value: item.documentation }
                : undefined,
        });
    }
    return result;
}
/**
 * Converts a json object containing attributes including function signatures to CompletionItems.
 */
function convertAttributesToCompletionItems(completionItems, itemKind, insertTextFunc) {
    const result = [];
    for (const item of completionItems) {
        const docComment = [
            '```prisma',
            item.fullSignature,
            '```',
            '___',
            item.documentation,
        ];
        for (const param of item.params) {
            docComment.push('', '_@param_ ' + param.label + ' ' + param.documentation);
        }
        result.push({
            label: item.label,
            kind: itemKind,
            insertText: insertTextFunc(item.label),
            insertTextFormat: 2,
            documentation: {
                kind: vscode_languageserver_1.MarkupKind.Markdown,
                value: docComment.join('\n'),
            },
        });
    }
    return result;
}
exports.corePrimitiveTypes = convertToCompletionItems(completions.primitiveTypes, vscode_languageserver_1.CompletionItemKind.TypeParameter, (label) => label.replace('()', '($0)').replace('""', '"$0"'));
exports.allowedBlockTypes = convertToCompletionItems(completions.blockTypes, vscode_languageserver_1.CompletionItemKind.Class);
exports.supportedDataSourceFields = convertToCompletionItems(completions.dataSourceFields, vscode_languageserver_1.CompletionItemKind.Field);
exports.supportedGeneratorFields = convertToCompletionItems(completions.generatorFields, vscode_languageserver_1.CompletionItemKind.Field);
exports.blockAttributes = convertAttributesToCompletionItems(completions.blockAttributes, vscode_languageserver_1.CompletionItemKind.Property, (label) => label.replace('[]', '[$0]').replace('""', '"$0"'));
exports.fieldAttributes = convertAttributesToCompletionItems(completions.fieldAttributes, vscode_languageserver_1.CompletionItemKind.Property, (label) => label.replace('()', '($0)').replace('""', '"$0"'));
exports.relationArguments = convertAttributesToCompletionItems(completions.relationArguments, vscode_languageserver_1.CompletionItemKind.Property, (label) => label.replace('[]', '[$0]').replace('""', '"$0"'));
exports.dataSourceUrlArguments = convertAttributesToCompletionItems(completions.datasourceUrlArguments, vscode_languageserver_1.CompletionItemKind.Property, (label) => label.replace('()', '($0)').replace('""', '"$0"'));
exports.dataSourceProviders = convertToCompletionItems(completions.datasourceProviders, vscode_languageserver_1.CompletionItemKind.Constant);
exports.dataSourceProviderArguments = convertToCompletionItems(completions.datasourceProviderArguments, vscode_languageserver_1.CompletionItemKind.Property, (label) => label.replace('[]', '[$0]').replace('""', '"$0"'));
exports.generatorProviders = convertToCompletionItems(completions.generatorProviders, vscode_languageserver_1.CompletionItemKind.Constant);
exports.generatorProviderArguments = convertToCompletionItems(completions.generatorProviderArguments, vscode_languageserver_1.CompletionItemKind.Property, (label) => label.replace('""', '"$0"'));
exports.previewFeaturesArguments = convertToCompletionItems(completions.previewFeaturesArguments, vscode_languageserver_1.CompletionItemKind.Property, (label) => label.replace('[]', '[$0]').replace('""', '"$0"'));
//# sourceMappingURL=completionUtil.js.map