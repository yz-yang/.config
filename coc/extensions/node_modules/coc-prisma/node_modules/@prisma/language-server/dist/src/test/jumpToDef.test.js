"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const MessageHandler_1 = require("../MessageHandler");
const assert = __importStar(require("assert"));
const helper_1 = require("./helper");
function assertJumpToDefinition(position, expectedRange, fixturePath) {
    const document = helper_1.getTextDocument(fixturePath);
    const params = {
        textDocument: document,
        position: position,
    };
    const defResult = MessageHandler_1.handleDefinitionRequest(document, params);
    assert.ok(defResult !== undefined);
    assert.deepStrictEqual(defResult.range, expectedRange);
}
suite('Jump-to-Definition', () => {
    const fixturePath = './correct.prisma';
    test('Diagnoses jump from attribute to model', () => {
        assertJumpToDefinition({
            character: 9,
            line: 22,
        }, {
            start: {
                line: 9,
                character: 0,
            },
            end: {
                line: 16,
                character: 1,
            },
        }, fixturePath);
        assertJumpToDefinition({
            character: 14,
            line: 14,
        }, {
            start: {
                line: 18,
                character: 0,
            },
            end: {
                line: 24,
                character: 1,
            },
        }, fixturePath);
        assertJumpToDefinition({
            character: 16,
            line: 11,
        }, {
            start: {
                line: 26,
                character: 0,
            },
            end: {
                line: 31,
                character: 1,
            },
        }, fixturePath);
    });
});
//# sourceMappingURL=jumpToDef.test.js.map