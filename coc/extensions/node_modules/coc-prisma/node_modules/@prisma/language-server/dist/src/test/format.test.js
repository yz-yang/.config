"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const MessageHandler_1 = require("../MessageHandler");
const util_1 = require("../prisma-fmt/util");
const install_1 = __importDefault(require("../prisma-fmt/install"));
const assert = __importStar(require("assert"));
const helper_1 = require("./helper");
function assertFormat(fixturePath) {
    return __awaiter(this, void 0, void 0, function* () {
        const document = helper_1.getTextDocument(fixturePath);
        const params = {
            textDocument: document,
            options: {
                tabSize: 2,
                insertSpaces: true,
            },
        };
        const formatResult = yield MessageHandler_1.handleDocumentFormatting(params, document, binPathPrismaFmt);
        assert.ok(formatResult.length !== 0);
    });
}
// Cache prisma-fmt binary path
let binPathPrismaFmt = '';
suite('Format', () => {
    suiteSetup(() => __awaiter(void 0, void 0, void 0, function* () {
        // install prisma-fmt binary
        if (binPathPrismaFmt === '') {
            binPathPrismaFmt = yield util_1.getBinPath();
        }
        if (util_1.binaryIsNeeded(binPathPrismaFmt))
            yield install_1.default(yield util_1.getDownloadURL(), binPathPrismaFmt);
    }));
    const fixturePath = './formatting/autoFormat.prisma';
    test('Format should do something', () => __awaiter(void 0, void 0, void 0, function* () {
        yield assertFormat(fixturePath);
    }));
});
//# sourceMappingURL=format.test.js.map